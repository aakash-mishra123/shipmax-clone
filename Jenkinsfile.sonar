pipeline {
    agent any

    environment {
        sonarHostUrl = 'https://sonarqube.orangemantra.org'
        projectKey = 'dtdc-frontend-sonar'
        authToken = 'sqa_34a0af29568dcd7074ebe20bd8f61c6473807106' // Use Jenkins credentials
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'feature', credentialsId: 'gitlab-creds-front', url: 'https://git.orangemantra.org/helpdesk/dtdc-project-frontend.git'
            }
        }

        stage('Install Dependencies & Generate Coverage') {
            steps {
                sh 'npm install --legacy-peer-deps'
                sh 'npm run test -- --coverage --passWithNoTests'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonarqubescanner-5.0.1'
                    withSonarQubeEnv() {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=${projectKey} \
                            -Dsonar.sources=. \
                            -Dsonar.exclusions=**/*.test.js,**/__tests__/** \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                            -Dsonar.host.url=${sonarHostUrl} \
                            -Dsonar.login=${authToken}
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: false
                    }
                }
            }
        }

        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def response = sh(
                        script: """curl -u ${authToken}: "${sonarHostUrl}/api/issues/search?componentKeys=${projectKey}&resolved=false" """,
                        returnStdout: true
                    ).trim()

                    writeFile file: 'sonarqube_issues.json', text: response
                    echo "SonarQube issues saved to sonarqube_issues.json"
                }
            }
        }

        stage('Convert JSON to TXT') {
            steps {
                script {
                    def pythonScript = """import json

def json_to_txt(json_file, txt_file):
    with open(json_file, "r") as file:
        data = json.load(file)
    with open(txt_file, "w") as txt:
        txt.write("JSON to TXT Report\\n")
        txt.write("=" * 50 + "\\n\\n")
        def write_content(key, value, indent=0):
            indent_space = ' ' * indent
            if isinstance(value, dict):
                txt.write(f"{indent_space}{key}:\\n")
                for k, v in value.items():
                    write_content(k, v, indent + 2)
            elif isinstance(value, list):
                txt.write(f"{indent_space}{key}:\\n")
                for i, item in enumerate(value):
                    txt.write(f"{indent_space}  - Item {i + 1}:\\n")
                    write_content("", item, indent + 4)
            else:
                txt.write(f"{indent_space}{key}: {value}\\n")
        for key, value in data.items():
            write_content(key, value)

    print(f"TXT file created successfully: {txt_file}")

json_to_txt("sonarqube_issues.json", "DTDC_Frontend_sonarqube_issues.txt")
"""
                    writeFile file: 'convert_json_to_txt.py', text: pythonScript
                    sh 'python3 convert_json_to_txt.py'
                }
            }
        }

        stage('Generate Email Body') {
            steps {
                script {
                    def totalIssues = 0
                    def bugs = [total: 0, minor: 0, major: 0, critical: 0, blocker: 0]
                    def codeSmells = [total: 0, minor: 0, major: 0, critical: 0, blocker: 0]
                    def vulnerabilities = [total: 0, minor: 0, major: 0, critical: 0, blocker: 0]
                    def duplications = [total: 0, minor: 0, major: 0, critical: 0, blocker: 0]

                    def page = 1
                    def pageSize = 100
                    def maxPages = 100

                    while (page <= maxPages) {
                        def curlCommand = """
                            curl -u ${authToken}: "${sonarHostUrl}/api/issues/search?componentKeys=${projectKey}&resolved=false&ps=${pageSize}&p=${page}" | \
                            jq '{
                                total_issues: .total,
                                issues: .issues
                            }'
                        """

                        def commandOutput = sh(script: curlCommand, returnStdout: true).trim()
                        def parsedOutput = readJSON text: commandOutput

                        def currentTotalIssues = parsedOutput.total_issues
                        def issues = parsedOutput.issues

                        totalIssues += currentTotalIssues

                        issues.each { issue ->
                            if (issue.type == "BUG") {
                                bugs.total += 1
                                if (issue.severity == "MINOR") bugs.minor += 1
                                if (issue.severity == "MAJOR") bugs.major += 1
                                if (issue.severity == "CRITICAL") bugs.critical += 1
                                if (issue.severity == "BLOCKER") bugs.blocker += 1
                            }
                            if (issue.type == "CODE_SMELL") {
                                codeSmells.total += 1
                                if (issue.severity == "MINOR") codeSmells.minor += 1
                                if (issue.severity == "MAJOR") codeSmells.major += 1
                                if (issue.severity == "CRITICAL") codeSmells.critical += 1
                                if (issue.severity == "BLOCKER") codeSmells.blocker += 1
                                if (issue.text == "Duplicated code") {
                                    duplications.total += 1
                                    if (issue.severity == "MINOR") duplications.minor += 1
                                    if (issue.severity == "MAJOR") duplications.major += 1
                                    if (issue.severity == "CRITICAL") duplications.critical += 1
                                    if (issue.severity == "BLOCKER") duplications.blocker += 1
                                }
                            }
                            if (issue.type == "VULNERABILITY") {
                                vulnerabilities.total += 1
                                if (issue.severity == "MINOR") vulnerabilities.minor += 1
                                if (issue.severity == "MAJOR") vulnerabilities.major += 1
                                if (issue.severity == "CRITICAL") vulnerabilities.critical += 1
                                if (issue.severity == "BLOCKER") vulnerabilities.blocker += 1
                            }
                        }

                        if (currentTotalIssues < pageSize) {
                            break
                        }

                        page++
                    }

                    env.EMAIL_BODY = """
<h3>DTDC Frontend SonarQube Issues Summary</h3>
<table border="1" cellpadding="5" cellspacing="0">
<tr><th>Issue Type</th><th>Total</th><th>Minor</th><th>Major</th><th>Critical</th><th>Blocker</th></tr>
<tr><td><b>Bugs</b></td><td>${bugs.total}</td><td>${bugs.minor}</td><td>${bugs.major}</td><td>${bugs.critical}</td><td>${bugs.blocker}</td></tr>
<tr><td><b>Code Smells</b></td><td>${codeSmells.total}</td><td>${codeSmells.minor}</td><td>${codeSmells.major}</td><td>${codeSmells.critical}</td><td>${codeSmells.blocker}</td></tr>
<tr><td><b>Vulnerabilities</b></td><td>${vulnerabilities.total}</td><td>${vulnerabilities.minor}</td><td>${vulnerabilities.major}</td><td>${vulnerabilities.critical}</td><td>${vulnerabilities.blocker}</td></tr>
<tr><td><b>Duplications</b></td><td>${duplications.total}</td><td>${duplications.minor}</td><td>${duplications.major}</td><td>${duplications.critical}</td><td>${duplications.blocker}</td></tr>
</table>
<p><b>Note:</b> This summary is generated from SonarQube issues categorized by type and severity levels.</p>
                    """

                    echo "Generated Email Body:"
                    echo "${env.EMAIL_BODY}"
                }
            }
        }

        stage('Send Email with Summary') {
            steps {
                script {
                    emailext(
                        subject: 'DTDC Frontend SonarQube Issues Report',
                        body: env.EMAIL_BODY,
                        mimeType: 'text/html',
                        to: '''bhardwaj.ayush@orangemantra.in, mishra.rohit@orangemantra.in, singh.sukhwinder@orangemantra.in''',
                        replyTo: 'devops@orangemantra.in',
                        from: 'Orangemantra Automation <devops@orangemantra.in>',
                        attachmentsPattern: 'DTDC_Frontend_sonarqube_issues.txt',
                        recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
                    )
                }
            } 
        }
    }
}
